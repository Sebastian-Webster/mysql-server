--source include/have_router.inc
--source include/have_jit_executor.inc

--source ../include/mrs/is_mrs_schema_v4.inc

# Set the router-id, to generate statistics
# this way we can wait until router detects
# changes.
--let $extra_mrs_router_id=1
--source ../include/predefined_setup/configure_router_mrs_root.inc
--source ../include/schema/basic_schema.sql

CREATE USER user1@'%' IDENTIFIED BY 'secretpass1';

--source ../include/mrs/start_object_definition.inc

# Roles
--let $mrs_add_role_caption=AllPriv
--source ../include/mrs/role/add.inc

--let $mrs_grant_privilege_service_path=/svc1
--let $mrs_grant_privilege_schema_path=*
--let $mrs_grant_privilege_object_path=*
--let $mrs_grant_privilege_crud_operations=READ,CREATE,UPDATE,DELETE
--source ../include/mrs/role/grant_privilege.inc

# Service
--let $mrs_add_service_path="/svc1"
--let $mrs_add_host_name=""
--source ../include/mrs/service/add.inc

# A schema is needed to create the db_object
--let $mrs_add_schema=basic_schema
--let $mrs_add_schema_path=/basic_schema
--source ../include/mrs/db_schema/add.inc


# Auth
--let $mrs_add_auth_app=default authentication
--let $mrs_add_auth_vendor=MySQL Internal
--let $mrs_add_auth_service=/svc1
--source ../include/mrs/auth_app/add.inc

# Users
--let $mrs_add_user_ext_uid='user1@%'
--let $mrs_add_user_name='user1'
--let $mrs_add_user_role=AllPriv
--let $mrs_add_user_auth_string='ignore'
--source ../include/mrs/user/add.inc

# Content Set
--let $mrs_add_content_set_path=/set
--let $mrs_add_content_set_enabled=1
--let $mrs_add_content_set_options='{"script_module_files":[{"class_name":"Sample","file_to_load":"/Sample.js"}],"contains_mrs_scripts":true}'
--let $mrs_add_content_set_content_type='SCRIPTS'
--source ../include/mrs/content_set/add.inc
SET @my_set=@content_set_id;

# Content files
--let $mrs_add_content_file_path=/Sample.js
let $mrs_add_content="let Sample = (() => {
  let _classThis; 
  (class {
    static { _classThis = this; }
    static helloWorld() {
      return 'Hello World!';
    }

    static helloUser() {
      const userId = getCurrentMrsUserId();
      const query = 'SELECT name FROM mysql_rest_service_metadata.mrs_user WHERE id = UNHEX(?)';
      const result = getSession().runSql(query, [userId]).fetchOneObject();
      return 'Hello ' + result.name + '!';
    }

    static helloSomeone(someone) {
      return 'Hello ' + someone + '!';
    }

    static getSampleContentSetPath() {
      return getContentSetPath('Sample');
    }

    static errorCCallbackMissingParams() {
      return getContentSetPath();
    }

    static defaultTimeOut() {
      getSession().runSql('select sleep(3)');
      return 'Unexpected successful response!';
    }

  }); return _classThis; })(); export { Sample };";

--source ../include/mrs/content_file/add.inc
SET @auth_content_file_id=@content_file_id;


--let $default_script_file="/Sample.js"
--let $default_script_class_name=Sample


# helloWorld end point registration
--let $script_function_name=helloWorld
--source scripting_add_endpoint.inc

# helloUser end point registration
--let $script_function_name=helloUser
--let $mrs_add_db_object_auth=1
--source scripting_add_endpoint.inc

# getSampleContentSetPath
--let $script_function_name=getSampleContentSetPath
--source scripting_add_endpoint.inc

# errorCCallbackMissingParams
--let $script_function_name=errorCCallbackMissingParams
--source scripting_add_endpoint.inc

# helloSomeone
--let $script_function_name=helloSomeone
--let $mrs_add_object_fields=sample
--let $mrs_add_object_field_types=VARCHAR(10)
--source scripting_add_endpoint.inc

# defaultTimeOut
--let $script_function_name=defaultTimeOut
--source scripting_add_endpoint.inc


--source ../include/mrs/end_object_definition.inc

## Test starts here
--echo
--echo  Calls JavaScript functions to exercise the functionality provided out
--echo  of the box, including:
--echo
--echo  The global functions:
--echo  - getSession()
--echo  - getContentSetPath()
--echo  - getSession()
--echo  - getCurrentMrsUserId
--echo
--echo  Passing parameters in the request
--echo  The default timeout

# Simple hello world test
exec $MRS_CLIENT_ARGS
  --path /svc1/basic_schema/helloWorld;

# Tests getContentSetPath() global function
exec $MRS_CLIENT_ARGS
  --path /svc1/basic_schema/getSampleContentSetPath;


exec $MRS_CLIENT_ARGS
  -a BASIC
  --path /svc1/authentication/login
  -u user1
  -p secretpass1
  --session-file $MYSQL_TMP_DIR/user_session1.dat;

# Testing getCurrentMrsUserId() global function and getSession() global function
exec $MRS_CLIENT_ARGS
  --path /svc1/basic_schema/helloUser
  --session-file $MYSQL_TMP_DIR/user_session1.dat;

# Testing return of passed parameter
--let $mrs_client_arg_path='/svc1/basic_schema/helloSomeone'
--let $mrs_client_arg_request_type=PUT
--let $mrs_client_arg_payload='{"sample":"dude!"}'
--source ../include/mrs/mrs_client.inc  

# Negative Tests Cases
# --------------------
# The following test is here to verify the session is perfectly usable in
# subsequent requests, i.e. the next one should successfully timeout, rather
# than immediately returning with 'Commands out of sync; you can't run...'

# Testing defaultTimeOut
exec $MRS_CLIENT_ARGS
  --path /svc1/basic_schema/defaultTimeOut
  --expected-status RequestTimeout;


# Invalid parameters format
--let $mrs_client_arg_path='/svc1/basic_schema/helloWorld'
--let $mrs_client_arg_request_type=PUT
--let $mrs_client_arg_payload='["one", "two"]'
--let $mrs_client_arg_expected_status=BadRequest
--source ../include/mrs/mrs_client.inc  


# Invalid parameters, function receives no parameters
--let $mrs_client_arg_path='/svc1/basic_schema/helloWorld'
--let $mrs_client_arg_request_type=PUT
--let $mrs_client_arg_payload='{"invalid_value":"some value"}'
--let $mrs_client_arg_expected_status=BadRequest
--source ../include/mrs/mrs_client.inc  


# Invalid parameters, missing parameters
# TODO(rennox): should it validate based on object_fields??
# Right now, the function is called with no parameters which is valid in
# JavaScript
exec $MRS_CLIENT_ARGS
  --path /svc1/basic_schema/helloSomeone;

# Invalid parameters received
--let $mrs_client_arg_path='/svc1/basic_schema/helloSomeone'
--let $mrs_client_arg_request_type=PUT
--let $mrs_client_arg_payload='{"invalid_value":"some value"}'
--let $mrs_client_arg_expected_status=BadRequest
--source ../include/mrs/mrs_client.inc  


# Testing missing parameters in backend exposed function
exec $MRS_CLIENT_ARGS
  --path /svc1/basic_schema/errorCCallbackMissingParams
  --json-pointer /status,/message;

# Cleanup

remove_file $MYSQL_TMP_DIR/user_session1.dat;
drop user user1@'%';

--source ../include/mrs/cleanup.inc
