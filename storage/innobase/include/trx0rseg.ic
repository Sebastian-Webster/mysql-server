/*****************************************************************************

Copyright (c) 1996, 2025, Oracle and/or its affiliates.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License, version 2.0, as published by the
Free Software Foundation.

This program is designed to work with certain software (including
but not limited to OpenSSL) that is licensed under separate terms,
as designated in a particular file or component or in included license
documentation.  The authors of MySQL hereby grant you an additional
permission to link the program and your derivative works with the
separately licensed software that they have either included with
the program or referenced in the documentation.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License, version 2.0,
for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA

*****************************************************************************/

/** @file include/trx0rseg.ic
 Rollback segment

 Created 3/26/1996 Heikki Tuuri
 *******************************************************/

#include "mtr0log.h"
#include "srv0srv.h"
#include "trx0purge.h"
#include "trx0sys.h"

/** Gets a rollback segment header.
@param[in]      space           Space where placed
@param[in]      page_no         Page number of the header
@param[in]      page_size       Page size
@param[in,out]  mtr             Mini-transaction
@return rollback segment header, page x-latched */
static inline trx_rsegf_t *trx_rsegf_get(space_id_t space, page_no_t page_no,
                                         const page_size_t &page_size,
                                         mtr_t *mtr) {
  buf_block_t *block;
  trx_rsegf_t *header;

  block = buf_page_get(page_id_t(space, page_no), page_size, RW_X_LATCH,
                       UT_LOCATION_HERE, mtr);

  buf_block_dbg_add_level(block, SYNC_RSEG_HEADER);

  header = TRX_RSEG + buf_block_get_frame(block);

  return (header);
}

/** Gets a newly created rollback segment header.
@param[in]      space           Space where placed
@param[in]      page_no         Page number of the header
@param[in]      page_size       Page size
@param[in,out]  mtr             Mini-transaction
@return rollback segment header, page x-latched */
static inline trx_rsegf_t *trx_rsegf_get_new(space_id_t space,
                                             page_no_t page_no,
                                             const page_size_t &page_size,
                                             mtr_t *mtr) {
  buf_block_t *block;
  trx_rsegf_t *header;

  block = buf_page_get(page_id_t(space, page_no), page_size, RW_X_LATCH,
                       UT_LOCATION_HERE, mtr);

  buf_block_dbg_add_level(block, SYNC_RSEG_HEADER_NEW);

  header = TRX_RSEG + buf_block_get_frame(block);

  return (header);
}

/** Gets the file page number of the nth undo log slot.
 @return page number of the undo log segment */
static inline page_no_t trx_rsegf_get_nth_undo(
    trx_rsegf_t *rsegf, /*!< in: rollback segment header */
    ulint n,            /*!< in: index of slot */
    mtr_t *mtr)         /*!< in: mtr */
{
  ut_a(n < TRX_RSEG_N_SLOTS);

  return (mtr_read_ulint(rsegf + TRX_RSEG_UNDO_SLOTS + n * TRX_RSEG_SLOT_SIZE,
                         MLOG_4BYTES, mtr));
}

/** Sets the file page number of the nth undo log slot. */
static inline void trx_rsegf_set_nth_undo(
    trx_rsegf_t *rsegf, /*!< in: rollback segment header */
    ulint n,            /*!< in: index of slot */
    page_no_t page_no,  /*!< in: page number of the undo log segment */
    mtr_t *mtr)         /*!< in: mtr */
{
  ut_a(n < TRX_RSEG_N_SLOTS);

  mlog_write_ulint(rsegf + TRX_RSEG_UNDO_SLOTS + n * TRX_RSEG_SLOT_SIZE,
                   page_no, MLOG_4BYTES, mtr);
}

/** Looks for a free slot for an undo log segment.
 @return slot index or ULINT_UNDEFINED if not found */
static inline ulint trx_rsegf_undo_find_free(
    trx_rsegf_t *rsegf, /*!< in: rollback segment header */
    mtr_t *mtr)         /*!< in: mtr */
{
  ulint i;
  page_no_t page_no;
  ulint max_slots = TRX_RSEG_N_SLOTS;

#ifdef UNIV_DEBUG
  if (trx_rseg_n_slots_debug) {
    max_slots = std::min(static_cast<ulint>(trx_rseg_n_slots_debug),
                         static_cast<ulint>(TRX_RSEG_N_SLOTS));
  }
#endif

  for (i = 0; i < max_slots; i++) {
    page_no = trx_rsegf_get_nth_undo(rsegf, i, mtr);

    if (page_no == FIL_NULL) {
      return (i);
    }
  }

  return (ULINT_UNDEFINED);
}

/** Convert a 7-bit ID stored in a rollback pointer to an undo space ID.
After 8.0 this is an undo space number which can be converted directly to
an undo space ID.
@param[in]      num             a 7-bit num from a rollback pointer
@param[in]      is_temp         true if rseg from Temp Tablespace else false.
@return undo tablespace ID containing the rollback segment */
inline space_id_t trx_undo_num_to_space_id(ulint num, bool is_temp) {
  /* The num must be an undo_space_num between 0 and 127. */
  ut_ad(num <= FSP_MAX_UNDO_TABLESPACES);

  if (is_temp) {
    ut_ad_eq(num, 0);
    return (srv_tmp_space.space_id());
  }

  ut_ad_ne(num, 0);

  /* We assume at this point that all undo tablespaces have
  reserved space_ids and RSEG_ARRAY pages. */
  ut_ad(!undo::spaces->empty());

  /* The space_id_bank for this slot cannot change since this call is done
  by purge or MVCC. This space_id can only change during truncate when
  there are no more undo logs in this undo tablespace. */
  space_id_t space_id = undo::num2id(static_cast<space_id_t>(num));
  ut_ad(space_id != SPACE_UNKNOWN);

  return (space_id);
}

/** Get a pointer to the rollback segment directory header and x-latches its
page.
@param[in]      space_id        Undo Tablespace ID
@param[in]      mtr             mtr
@return pointer to rollback segment directory header with page x-latched. */
inline trx_rsegsf_t *trx_rsegsf_get(space_id_t space_id, mtr_t *mtr) {
  buf_block_t *block;
  trx_rsegsf_t *rsegs_header;

  ut_ad(mtr != nullptr);
  ut_ad(undo::is_reserved(space_id));

  block = buf_page_get(page_id_t(space_id, FSP_RSEG_ARRAY_PAGE_NO),
                       univ_page_size, RW_X_LATCH, UT_LOCATION_HERE, mtr);
  buf_block_dbg_add_level(block, SYNC_RSEG_ARRAY_HEADER);

  rsegs_header = RSEG_ARRAY_HEADER + buf_block_get_frame(block);

  return (rsegs_header);
}

/** Get the page number of the nth rollback segment slot in the
RSEG_ARRAY page for this undo tablespace.
@param[in]      rsegs_header    rollback segment array page header
@param[in]      slot            slot index == rseg id
@param[in]      mtr             mtr
@return page number, FIL_NULL if slot unused */
inline page_no_t trx_rsegsf_get_page_no(trx_rsegsf_t *rsegs_header, ulint slot,
                                        mtr_t *mtr) {
  ut_ad(rsegs_header != nullptr);
  ut_ad(mtr != nullptr);
  ut_ad(slot < FSP_MAX_ROLLBACK_SEGMENTS);

  return (mtr_read_ulint(
      rsegs_header + RSEG_ARRAY_PAGES_OFFSET + slot * RSEG_ARRAY_SLOT_SIZE,
      MLOG_4BYTES, mtr));
}

/** Sets the page number of the nth rollback segment slot in the
independent undo tablespace.
@param[in]      rsegs_header    rollback segment array page header
@param[in]      slot            slot number on page  == rseg id
@param[in]      page_no         rollback regment header page number
@param[in]      mtr             mtr */
static inline void trx_rsegsf_set_page_no(trx_rsegsf_t *rsegs_header,
                                          ulint slot, page_no_t page_no,
                                          mtr_t *mtr) {
  ut_ad(rsegs_header);

  mlog_write_ulint(
      rsegs_header + RSEG_ARRAY_PAGES_OFFSET + slot * RSEG_ARRAY_SLOT_SIZE,
      page_no, MLOG_4BYTES, mtr);
}
